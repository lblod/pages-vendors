<AuHeading @level="1" @skin="1">Vendor SPARQL API</AuHeading>

<p>
  De Vendor SPARQL API is een manier om SPARQL queries uit te voeren op een SPARQL endpoint gehost op een van de applicaties binnen Loket en verwanten om informatie op te vragen. Dit vervangt een klassieke JSON REST API, maar kan eveneens worden gebruikt voor het integreren met de applicaties van Loket. Deze API biedt de volledige vrijheid van SPARQL voor het construeren van een informatieverzoek. Per applicatie zijn er verschillende soorten gegevens terug te vinden, dus houdt acht met de host waarop query's worden uitgevoerd. De bedoeling is wel dat op elk van de hosts een gelijkaardige Vendor SPARQL API terug te vinden is die steeds op dezelfde manier aanspreekbaar is. Het generiek mechanisme wordt op deze pagina verduidelijkt.
</p>
<p>
  Het kunnen uitvoeren van SPARQL query's brengt echter risico met zich mee in verband met databeveiliging. Daarom wordt de toegang tot het SPARQL endpoint beschermd met een login en is het enkel mogelijk om data uit te lezen. Er kan dus niets gewijzigd worden via SPARQL Update query's. Deze pagina beschrijft aan de hand van voorbeelden het stappenplan om in te loggen, hoe SPARQL query's uit te voeren, hoe weer uit te loggen en hoe eventuele fouten worden afgehandeld.
</p>
<p>
  Per applicatie is er buiten deze pagina nog documentatie te vinden over de beschikbare data en eventuele aandachtspunten. Bekijk hiervoor de gerelateerde pagina's: <LinkTo @route="docs.meldingsplicht-sparql">Meldingsplicht SPARQL API</LinkTo>, <LinkTo @route="docs.berichtencentrum-sparql">Berichtencentrum SPARQL API</LinkTo>, &hellip;
</p>

<AuHeading @level="2" @skin="2">Inloggen</AuHeading>
<p>
  Inloggen gebeurt door middel van een request met authenticatie door middel van vendor URI, sleutel en de URI van de organisatie in een JSON-LD body naar
</p>
<CodeBlock @code="POST https://<applicatie-host>/vendor/login" />
<p>
  De specifieke hostname hangt af van het type van gegevens die benodigd zijn. Raadpleeg hiervoor de specifieke documentatie op de pagina's hierboven beschreven (<LinkTo @route="docs.meldingsplicht-sparql">Meldingsplicht SPARQL API</LinkTo>, <LinkTo @route="docs.berichtencentrum-sparql">Berichtencentrum SPARQL API</LinkTo>, &hellip;). De JSON-LD body ziet er minimaal uit zoals het volgende:
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-login-request-body.json" />
<p>
  In het voorbeeld hierboven staat de <CodeInline @code="organisation" /> voor de URI van de bestuurseenheid waar de vendor garant voor staat. <CodeInline @code="publisher.uri" /> staat voor de URI van de vendor, en <CodeInline @code="publisher.key" /> staat voor de geheime sleutel die eerder werd verkregen. Het aanvragen van een publisher URI en geheime sleutel (key) staan beschreven in de sectie &ldquo;Authenticatie&rdquo; op de pagina over <LinkTo @route="docs.meldingsplicht">Meldingsplicht API</LinkTo>.
</p>
<p>
  De volledige JSON-LD context beschrijft met RDF wat elke eigenschap betekent, welk datatype wordt verwacht en zou aan aan elke request moeten worden toegevoegd. Deze login service voegt echter automatisch de juiste context toe aan elke login request, dus het verzenden van de minimale body zoals hierboven volstaat. Vind hieronder de volledige context, indien nodig.
</p>
<SnippetToggle @snippetFilename="vendor-sparql/login-context.json" />
<p>
  Het antwoord op de login request is <strong>een sessie cookie</strong> waar volgende requests (SPARQL query's en uitloggen) mee worden geauthenticeert. Er wordt ook een JSON-LD body teruggegeven die informatie over de sessie voorstelt, zoals hieronder als voorbeeld wordt weergegeven. Deze informatie kan echter worden genegeerd, want <strong>de sessie wordt vanaf de login request enkel bepaald door middel van de cookie</strong>.
</p>
<SnippetToggle @snippetFilename="vendor-sparql/voorbeeld-login-response.json" />
<p>
   Als referentie wordt hieronder nog de context vermeld van het antwoord met de sessieinformatie.
</p>
<SnippetToggle @snippetFilename="vendor-sparql/login-response-context.json" />

<AuHeading @level="3" @skin="3">Voorbeeld</AuHeading>
<p>
  Als voorbeeld staat hieronder hoe een login kan worden uitgevoerd met <CodeInline @code="cURL" />. Het ontvangen en verder weer versturen van cookies is noodzakelijk. Daarom wordt de cookie engine ingeschakeld met de <CodeInline @code="-b" /> en <CodeInline @code="-c" /> flags die verwijzen naar een bestand waar de cookies worden opgeslagen.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-login.sh" />

<AuHeading @level="2" @skin="2">Versturen van query's</AuHeading>
<p>
  Eenmaal ingelogd is het mogelijk om SPARQL query's te versturen naar het SPARQL endpoint, benaderbaar via
</p>
<CodeBlock @code="https://<applicatie-host>/vendor/sparql" />
<p>
  Het versturen van query's moet gebeuren via HTTP(S) requests zoals beschreven in de <a href="https://www.w3.org/TR/sparql11-protocol/#query-operation" target="_blank" rel="noopener noreferrer">offici&euml;le specificatie van het SPARQL Protocol</a>. Er is geen webpagina beschikbaar op dit endpoint. Het is noodzakelijk om de sessie cookie, verkregen bij het inloggen, steeds mee te sturen bij elke request.
</p>

<AuHeading @level="3" @skin="3">Voorbeelden van query's</AuHeading>
<p>
  Hieronder staan een aantal voorbeelden van SPARQL query's die naar het endpoint kunnen worden verstuurd. Deze voorbeelden gaan over inzendingen van publicaties (Submissions), en deze zijn dus louter demonstratief. Aan de hand van het eerste voorbeeld kan de status van een ingestuurde melding worden opgevraagd.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-melding-status.sparql" />
<p>
  Met het volgende voorbeeld worden er 100 eerder verrichtte meldingen opgevraagd. Met de verkregen URI's kan men query's gelijk de bovenstaande opstellen.
</p>
<Snippet @snippetFilename="vendor-sparql/meldingen-eerste-100.sparql" />

<AuHeading @level="3" @skin="3">Voorbeelden van requests</AuHeading>
<p>
  Hieronder staan een aantal voorbeelden van requests, uitgevoerd via <CodeInline @code="cURL" />. De query is steeds op te vullen met de benodigde SPARQL query.
</p>
<p>
  De meest gebruikte manier: een POST request met de query als body, ge&euml;ncodeerd zoals een formulier veld.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-request-form.sh" />
<p>
  Het volgende voorbeeld is hetzelfde als het vorige, maar voor de encodering is hier de typische JavaScript <CodeInline @code="encodeURIComponent()" /> gebruikt.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-request-form-url-encode.sh" />
<p>
  Dit kan ook uitgevoerd worden met de <CodeInline @code="--data-urlencode" /> parameter op <CodeInline @code="cURL" /> als men dan de query meegeeft als formulier veld zonder speciale encodering.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-request-form-data-urlencode.sh" />
<p>
  Uit volledigheid ondersteunt de endpoint ook GET requests, waar de SPARQL query als URL parameter wordt meegegeven. Deze methode is echter niet aan te raden vanwege beperkingen op de lengte van de query.
</p>
<Snippet @snippetFilename="vendor-sparql/voorbeeld-request-get.sh" />

<AuHeading @level="2" @skin="2">Uitloggen</AuHeading>
<p>
  Om de sessie af te sluiten volstaat het om een request, als methode <CodeInline @code="DELETE" /> met de sessie cookie, te sturen naar
</p>
<div>
  <CodeBlock @code="DELETE https://<applicatie-host>/vendor/logout" />
</div>
<p>
  Het antwoord op deze request is, als uitloggen successvol was, leeg. De HTTP response code is dan <CodeInline @code="204 No Content" />.
</p>

<AuHeading @level="3" @skin="3">Voorbeeld</AuHeading>
<p>
  Bij het gebruik van <CodeInline @code="cURL" /> ziet de request voor uitloggen er als volgt uit.
</p>
<Snippet @snippetFilename="vendor-sparql/logout.sh" />

<AuHeading @level="2" @skin="2">Fouten</AuHeading>
<p>
  Bij elk van bovenstaande soort request kunnen er fouten optreden. Een login kan falen vanwege foute combinatie van vendor URI en sleutel, een query kan falen vanwege syntax problemen met de query zelf of vanwege een fout opgestelde request, &hellip; In alle gevallen wordt er zo veel mogelijk aan gedaan om een waardevolle foutboodschap terug te geven in combinatie met een bijhorende HTTP (fout)code. In het geval van het versturen van query's kunnen foutberichten en foutcodes terugkomen die gegenereerd werden door de database zelf of van een tussenliggende service. Dit kan enige inconsistenties veroorzaken in de response. In het geval van de login en logout requests, fouten zitten verwerkt in de volgende JSON-LD context en worden ook op die manier geformatteerd als antwoord.
</p>
<SnippetToggle @snippetFilename="vendor-sparql/error-response-context.json" />